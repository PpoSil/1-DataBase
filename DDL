-- sqlite3 database.sqlite3
-- .databases
-- .mode csv
-- .import users.csv users
-- .quit

----------------------------------------------------------------------------

CREATE TABLE contacts (
    name TEXT NOT NULL,
    age INTEGER NOT NULL,
    email TEXT NOT NULL UNIQUE
);

--1. Rename a table
ALTER TABLE contacts RENAME TO new_contacts;
-- ALTER TABLE new_contacts RENAME TO contacts;

--2. Rename a column
ALTER TABLE contacts RENAME COLUMN name TO last_name;

--3. Add a new column to a table
ALTER TABLE contacts ADD COLUMN address TEXT NOT NULL DEFAULT 'no address';

--4. Delete a column
ALTER TABLE contacts DROP COLUMN address;

--5. 테이블 삭제
DROP TABLE new_contacts;

----------------------------------------------------------------------------

CREATE TABLE users (
first_name TEXT NOT NULL,
last_name TEXT NOT NULL,
age INTEGER NOT NULL,
country TEXT NOT NULL,
phone TEXT NOT NULL,
balance INTEGER NOT NULL
);


--[1] 'SELECT @@@ FROM 테이블 명;' : 특정 테이블에서 데이터를 조회하기 위해 사용
-- 1. 이름 조회
SELECT first_name, last_name 
FROM users;

-- 2. 나이, 지역 조회
SELECT age, country 
FROM users;


--[2] ORDER BY 절: 쿼리의 결과를 오름차순(ASC: 기본 값) 내림차순(DESC)로 정렬
-- SELECT @@@ FROM 테이블 명 ORDER BY @@@;
-- SELECT 문에 추가하여 결과를 정렬
-- ORDER BY 절은 FROM 절 뒤에 위치
-- 1. 이름과 나이를 나이가 어린 순서대로 조회하기(오름차순)
-- 오름차순: ORDER BY age ASC;
-- ASC는 안 적으면 디폴트 값임!
SELECT first_name, age 
FROM users 
ORDER BY age ASC;

-- 2. 이름과 나이를 나이가 많은 순서대로 조회하기(내림차순)
-- 내림차순: ORDER BY age DESC
SELECT first_name, age 
FROM users 
ORDER BY age DESC;

-- 3. 이름, 나이, 계좌 잔고를 나이가 어린 순으로,
-- 만약 같은 나이라면 계좌 잔고가 많은 순으로!
SELECT first_name, age, balance 
FROM users 
ORDER BY age ASC, balance DESC;
-- == SELECT first_name, age, balance FROM users ORDER BY age, balance DESC;
-- ASC(오름차순)는 디폴트 값! 안 적으면 오름차순으로 들어가게 됨.

----------------------------------------------------------------------------

--[2] DISTINCT: 조회 결과에서 중복된 행을 제거
-- SELECT DISTINCT @@@ FROM 테이블 명;
-- 1. 지역명을 중복없이 출력하라
SELECT DISTINCT country 
FROM users;

-- 2. 이름과 지역이 중복없이 모든 이름과 지역 조회하기
SELECT DISTINCT first_name, country 
FROM users;

-- 3. (이름과 지역 둘 다 ) 중복 없이 지역 순으로 오름차순 정렬하여 모든 이름과 지역 조회하기
SELECT DISTINCT first_name, country 
FROM users 
ORDER BY country;
-- ex) '솔비 - 경상북도' 가 2명 이상이면 '솔비 - 경상북도'의 데이터는 하나만 조회 됨.
-- 한 행의 데이터 자체의 중복값 제거!!

----------------------------------------------------------------------------

--[3] WHERE 절 : 특정 검색 조건을 지정
-- SELECT @@@ FROM 테이블 명 WHERE @@@;
-- 1. 나이가 30살 이상인 사람들의 이름, 나이, 계좌 잔고 조회하기
SELECT first_name, age, balance 
FROM users 
WHERE age >= 30;

-- 2. 이름이 '건우'고 나이가 33살인 데이터 조회
SELECT first_name, age, balance 
FROM users 
WHERE first_name = '건우' and age = 33;

-- 3. 나이가 30살 이상이고 계좌 잔고가 50만원 초과인 사람들의 이름, 나이, 계좌 잔고 조회하기
SELECT first_name, age, balance
FROM users
WHERE age >= 30 and balance > 500000;

--[3-1] LIKE 연산자: 패턴 일치를 기반으로 데이터를 조회
-- SELECT @@@ FROM 테이블 명 WHERE @@@ LIKE "blah";
-- WHERE 절 안에 쓸 수 있는 연산자
-- 기본적으로 대소문자를 구분 X
--(1) % : 0개 이상의 문자가 올 수 있음을 의미 ex) "en%" -> english, en, eng, ... / "%en% -> sentence, en, send ...
--(2) _ : 단일(1개)문자가 있음을 의미 ex) "en_" -> eng, enk, ens ... 
-- 1. 이름에 '호'가 포함되는 사람들의 이름과 성 조회하기
SELECT first_name, last_name
FROM users
WHERE first_name LIKE '%호%';

-- 2. 이름이 '준'으로 끝나는 사람들의 이름 조회하기
SELECT first_name, last_name
FROM users
WHERE first_name LIKE '%준';

-- 3. 서울 지역 전화번호를 가진 사람들의 이름과 전화번호 조회하기
SELECT first_name, phone 
FROM users
WHERE phone LIKE '02-%';

-- 4. 나이가 20대인 사람들의 이름과 나이 조회하기
SELECT first_name, age
FROM users
WHERE age LIKE '2%';

-- 5. 전화번호 중간 4자리가 51로 시작하는 사람들의 이름과 전화번호 조회하기
SELECT first_name, phone
FROM users
WHERE phone LIKE '%-51__-%';

-- [3-2] IN 연산자: 값이 값 목록 결과에 있는 값과 일치하는지 확인
-- SELECT @@@ FROM 테이블 명 WHERE @@@ IN ("blah");
-- WHERE 절 안에 
--(1) 표현식이 값 목록의 값과 일치하는지 여부에 따라 true 또는 false를 반환
--(2) IN 연산자의 결과를 부정하려면 NOT IN 사용
-- 1. 경기도 혹은 강원도에 사는 사람들의 이름과 지역 조회하기
SELECT first_name, country
FROM users
WHERE country IN ('경기도', '강원도');

-- 2. 경기도 혹은 강원도에 살지 않는 사람들의 이름과 지역 조회하기
SELECT first_name, country
FROM users
WHERE country NOT IN ('경기도', '강원도');
-- WHERE country <> "경기도" OR country <> "강원도";
-- '<>' == '!='

-- [3-3] BEWEEN 연산자: 값이 값 범위에 있는지 테스트
-- SELECT @@@ FROM 테이블 명 WHERE @@@ BETWEEN @@@;
-- default 값으로 이상, 이하를 의미
-- 값이 지정된 범위에 있으면 true를 반환
-- 결과를 부정하려면 NOT BETWEEN
-- 1. 나이가 20살 이상, 30살 이하인 사람들의 이름과 나이 조회하기
SELECT first_name, age
FROM users
WHERE age BETWEEN 20 AND 30;
-- WHERE age >= 20 AND age <= 30;

-- 2. 나이가 20살 미만, 30살 초과인 사람들의 이름과 나이 조회하기
SELECT first_name, age
FROM users
WHERE age NOT BETWEEN 20 AND 30;
-- WHERE age < 20 OR age > 30;

----------------------------------------------------------------------------

--[4] LIMIT 절: 쿼리에서 반환되는 행 수를 제한
-- SELECT @@@ FROM 테이블 명 LIMIT @@@;
-- 1. 첫 번째부터 열 번째 데이터까지 rowid와 이름 조회하기
SELECT rowid, first_name
FROM users
LIMIT 10;

-- 2. 계좌 잔고가 가장 많은 10명의 이름과 계좌 잔고 조회하기
SELECT first_name, balance
FROM users
ORDER BY balance DESC
LIMIT 10;

-- 3. 나이가 가장 어린 5명의 이름과 나이 조회하기
SELECT first_name, age
FROM users
ORDER BY age
LIMIT 5;

--[4-1] OFFSET 키워드
-- SELECT @@@ FROM 테이블 명 LIMIT @@@ OFFSET @@@;
-- LIMIT 절을 사용하면 첫 번째 데이터부터 지정한 수 만큼의 데이터를 받아올 수 o
-- OFFSET과 함께 사용하면 특정 지정된 위치에서부터 데이터 조회 가능

-- 1. 11번쨰부터 20번째 데이터의 rowid와 이름 조회하기
SELECT rowid, first_name
FROM users
LIMIT 10 OFFSET 10;

----------------------------------------------------------------------------

-- 해석되는 순서
-- 4. SELECT column1
-- 1. FROM users
-- 2. WHERE comparsion
-- 3. GROUP BY
-- 5. ORDER BY: 정렬 과정
-- 6. LIMIT: 몇 개의 행?
